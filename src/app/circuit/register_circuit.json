{"noir_version":"0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704","hash":15033103951878021750,"abi":{"parameters":[{"name":"userAadharNumber","type":{"kind":"field"},"visibility":"private"},{"name":"userSecret","type":{"kind":"field"},"visibility":"private"},{"name":"systemSecret","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"systemSecret":[{"start":2,"end":3}],"userAadharNumber":[{"start":0,"end":1}],"userSecret":[{"start":1,"end":2}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[3]},"bytecode":"H4sIAAAAAAAA/7VRUQ7DIAhltS772llAtOLfrjIze/8TLGszlhnTv+pLCAmQx3tgAcDCF5ctblsY+OOt9T1PmkFnjPZa/GoPzXgOZPpxYa131gD1BpW3HdcBXqDZ097vflDrunzEc+YBvLbiYly8L9EVYnqiS1kC+pAXIaEg4eWEuYiXmHKKmMhzoTUkXpVslG/b/0dYUQ69KZ6EaXROB7rrmQ8h8fSnaQQAAA==","debug_symbols":"tc5BCsIwEIXhu7x1FulkWpK5irgIWqFQUjHZhbm7ClUKhW5Klg8+fl7FvNximZaUIRUWcqnIz5i+K5f4KpCOg8GY7hCyXg0e0zxCXFCzoy78KA/hmHrilfqB/pRYrwbdyRvsaaW97bf006aGbdewzc3aqm8=","file_map":{"24":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake3)]\npub fn blake3<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"39":{"source":"use dep::std;\n\nfn main(userAadharNumber: Field, \n        userSecret: Field,\n        systemSecret: Field) -> pub Field {\n    let userIdentifierHash = registerForPoll(userAadharNumber, userSecret, systemSecret);\n    userIdentifierHash\n}\n\nfn registerForPoll(userAadharNumber: Field, \n                   userSecret: Field,\n                   systemSecret: Field) -> Field {\n    let userIdentifierHash = std::hash::pedersen_hash([userAadharNumber, userSecret, systemSecret]);\n    assert(userIdentifierHash != 0);\n    userIdentifierHash\n}\n\n#[test]\nfn test_main() {\n    let value = main(1, 2, 42);\n    std::println(value);\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/Users/niteshagarwal/code/zk/zk-op/zkopreg/src/main.nr"}}}